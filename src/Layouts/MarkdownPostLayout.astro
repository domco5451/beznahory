---
import StarRating from "../components/ratings/StarRating.astro";
import PageLayout from "./PageLayout.astro";
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";

const { frontmatter, headings } = Astro.props;

---
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-gpx/2.1.2/gpx.min.js" defer></script>
<script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-fullscreen/v1.0.1/Leaflet.fullscreen.min.js'></script>
<link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-fullscreen/v1.0.1/leaflet.fullscreen.css' rel='stylesheet' />

<PageLayout title={frontmatter.title}>
  <div class="markdown-post-layout">
    <div class="aside-container">
      <aside class="markdown-heading">
          <h2 class="page-title">Obsah článku</h2>
          {headings.map((heading: any) => (
            <a href={`#${heading.slug}`} class="page-description-container">
              <p class="page-description">
                {heading.text}
              </p>
            </a>
          ))}
          {frontmatter.latitude && frontmatter.longitude ? (
            <a class="map-link" href={`/map#${Astro.url.pathname.split('/').pop()}`}>
              <Icon name="gps" size={30}/>
              <p>
                Zobraziť na mape
              </p>
            </a>
          ) : null}
          {frontmatter.gpx ? (
            <div id="map"></div>
            <a href="../../gpx/2025/demo.gpx" download="demo.gpx" class="gpx-link">
              <Icon name="download" size={30} />
              Stiahnuť GPX
            </a>
          ) : null}
         <!--  <section class="ratings">
            <div class="rating-container">
              <span class="difficulty">Obtiažnosť: </span>
              <StarRating score={frontmatter.ratings.difficulty} size={20} />
            </div>
            <div class="rating-container">
              <span class="difficulty">Výhľady: </span>
              <StarRating score={frontmatter.ratings.views} size={20} />
            </div>
            <div class="rating-container">
              <span class="difficulty">Terén: </span>
              <span>{frontmatter.ratings.terrain}</span>
            </div>
            <div class="rating-container">
              <span class="difficulty">Dĺžka: </span>
              <span>{frontmatter.ratings.length}</span>
            </div>
            <div class="rating-container">
              <span class="difficulty">Čas: </span>
              <span>{frontmatter.ratings.time}</span>
            </div>
          </section> -->
      </aside>
    </div>
    <article>
      <Image
        class="thumbnail"
        src={frontmatter.thumbnail.url}
        alt={frontmatter.thumbnail.alt}
        inferSize={true}
        layout="constrained"
        loading="eager"
      />
      <h1>{frontmatter.title}</h1>
      <header>
        <div class="author-info">
          <Image
            class="pfp"
            src={frontmatter.pfp.url}
            alt={frontmatter.pfp.alt}
            inferSize={true}
            layout="constrained"
            loading="eager"
          />
          <p><strong>{frontmatter.author}</strong></p>
        </div>
        <div class="flex-container">
          <Icon name="date" size={20}/>
          <p>{frontmatter.pubDate}</p>
        </div>
        <div class="flex-container">
          <Icon name="read" size={20}/>
          <p>{frontmatter.minutesRead}</p>
        </div>
      </header>
      <section class="markdown-content">
        <slot />
      </section>
    </article>
  </div>
</PageLayout>
<style>
  html {
    scroll-behavior: smooth; 
  }
  article {
    max-width: 800px;
  }
  header {
    display: flex;
    align-items: center;
    gap: 40px;
    margin-bottom: 20px;
  }
  h1 {
    font-size: 2.3rem;
    font-weight: bold;
    margin-block: 20px;
    color: var(--nav-hover-text);
  }
  .markdown-post-layout {
    max-width: 1200px;
    margin-block: 30px;
    margin-inline: 250px auto;
    display: flex;
    gap: 60px;
    position: relative;
  }

  /* Markdown */

  :global(.markdown-content p) {
    line-height: 2;
    margin-block: 20px;
  }
  :global(.markdown-content h2) {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--nav-hover-text);
    margin-block: 20px;
    scroll-margin-top: 80px;
  }
  .author-info {
    display: flex;
    align-items: center;
    gap: 20px;
  }
  .pfp {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 100%;
  }
  .thumbnail {
    max-width: 100%;
    height: 400px;
    object-fit: cover;
    border-radius: 10px;
  }
  .flex-container {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  /* TOC */

  .aside-container {
    position: sticky;
    top: 100px;
    width: fit-content;
    height: fit-content;
    align-items: start;
  }
  .markdown-heading .page-title {
    font-size: 1.3rem;
    color: var(--nav-hover-text);
    margin-bottom: 10px;
    letter-spacing: 2px;
  }
  .markdown-heading .page-description {
    font-size: 0.85rem;
    color: var(--text-primary);
    padding-inline-end: 20px;
    padding-inline-start: 10px;
  }
  .page-description-container {
    height: 60px;
    width: fit-content;
    display: flex;
    align-items: center;
    gap: 15px;
    border-radius: 0px 5px 5px 0px;
    border-inline-start: 4px solid var(--toc-border);
  }
  .page-description-container:hover .page-description {
    color: var(--nav-hover-text);
  }
  .page-description-container.active {
    background: var(--nav-hover-bg);
    border-inline-start: 4px solid var(--nav-hover-text);
  }
  
  /* Map link styling */
  
  .map-link{
    color: var(--nav-hover-text);
    background-color: var(--nav-hover-bg);
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 10px;
    border-radius: 5px;
    margin-block-start: 20px;
  }
  .map-link:hover {
    text-decoration: underline;
  }
  
  /* Ratings */

  .ratings {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-top: 20px;
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
  }
  .rating-container {
    display: flex;
    align-items: center;
  }
  .ratings .difficulty {
    color: var(--nav-hover-text);
    font-weight: bold;
    margin-right: 10px;
  }
  /* Gpx */
  .gpx-link {
    color: var(--nav-hover-text);
    background-color: var(--nav-hover-bg);
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 10px;
    border-radius: 5px;
  }
  #map {
    width: 200px;
    height: 200px;
    border-radius: 10px;
    margin-block: 20px;
  }
</style>
<script 
  define:vars={{ 
    hasGpx: !!frontmatter.gpx, 
    lat: frontmatter.latitude, 
    lng: frontmatter.longitude, 
    gpxPath: frontmatter.gpx 
  }}
>

document.addEventListener("DOMContentLoaded", () => {
  const mapElement = document.getElementById('map');
    if (!mapElement || !hasGpx) {
      return; // Ukonči, ak element neexistuje
    }

    if (!window.L) {
      console.error('Leaflet nie je načítaný!');
      return;
    }

    const initialLat = lat || 49.1;  // Default Slovensko 
    const initialLng = lng || 19.5;
    const map = L.map("map", {
      fullscreenControl: {
        pseudoFullscreen: true, // Použije pseudo fullscreen pre Leaflet
      },
    }).setView([initialLat, initialLng], 12); 

    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(map);

    if (lat && lng) {
      const marker = L.marker([lat, lng]).addTo(map);
    }

    if (gpxPath && window.L.GPX) {
      try {
        new L.GPX(gpxPath, {
          async: true,
          polyline_options: {
            color: '#3388ff',
            weight: 2,
            opacity: 0.7
          }
        }).on('loaded', function(e) {
          map.fitBounds(e.target.getBounds());
        }).addTo(map);
      } catch (e) {
        console.error('Chyba pri načítaní GPX', e);
      }
    }
})

/* Observer */
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      const headingId = entry.target.id;
      const tocLink = document.querySelector(`.markdown-heading a[href="#${headingId}"]`);
       
      if (tocLink) {
        if (entry.isIntersecting) {
          tocLink.classList.add('active');
        } else {
          tocLink.classList.remove('active');
        }
      }
    });
  }, {
    rootMargin: "0px",
    threshold: 1
  });
   
  document.querySelectorAll('article h2').forEach(heading => {
    observer.observe(heading);
  });
</script>
