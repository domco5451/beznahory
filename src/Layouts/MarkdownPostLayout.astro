---
import StarRating from "../components/ratings/StarRating.astro";
import PageLayout from "./PageLayout.astro";
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";

const { frontmatter, headings } = Astro.props;

---
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-gpx/2.1.2/gpx.min.js" defer></script>

<PageLayout title={frontmatter.title}>
  <div class="markdown-post-layout">
    <div class="aside-container-left">
      <aside>
        <div id="gpx-info"></div>
      {frontmatter.gpx ? (
            <div id="map"></div>
            <a href={frontmatter.gpx} class="gpx-link">
              <Icon name="download" size={20} />
              Stiahnuť trasu (.gpx)
            </a>
          ) : null}
          {frontmatter.latitude && frontmatter.longitude ? (
            <a class="map-link" href={`/map#${Astro.url.pathname.split('/').pop()}`}>
              <Icon name="gps" size={20}/>
              <p>
                Zobraziť na mape
              </p>
            </a>
          ) : null}
         <!--  <section class="ratings">
            <div class="rating-container">
              <span class="difficulty">Obtiažnosť: </span>
              <StarRating score={frontmatter.ratings.difficulty} size={20} />
            </div>
            <div class="rating-container">
              <span class="difficulty">Výhľady: </span>
              <StarRating score={frontmatter.ratings.views} size={20} />
            </div>
            <div class="rating-container">
              <span class="difficulty">Terén: </span>
              <span>{frontmatter.ratings.terrain}</span>
            </div>
            <div class="rating-container">
              <span class="difficulty">Dĺžka: </span>
              <span>{frontmatter.ratings.length}</span>
            </div>
            <div class="rating-container">
              <span class="difficulty">Čas: </span>
              <span>{frontmatter.ratings.time}</span>
            </div>
          </section> -->
      </aside>
    </div>
    <article>
      <Image
        class="thumbnail"
        src={frontmatter.thumbnail.url}
        alt={frontmatter.thumbnail.alt}
        inferSize={true}
        layout="constrained"
        loading="eager"
      />
      <h1>{frontmatter.title}</h1>
      <header>
        <div class="author-info">
          <Image
            class="pfp"
            src={frontmatter.pfp.url}
            alt={frontmatter.pfp.alt}
            inferSize={true}
            layout="constrained"
            loading="eager"
          />
          <p><strong>{frontmatter.author}</strong></p>
        </div>
        <div class="flex-container">
          <Icon name="date" size={20}/>
          <p>{frontmatter.pubDate}</p>
        </div>
        <div class="flex-container">
          <Icon name="read" size={20}/>
          <p>{frontmatter.minutesRead}</p>
        </div>
      </header>
      <section class="markdown-content">
        <slot />
      </section>
    </article>
    <div class="aside-container">
      <aside class="markdown-heading">
           <h2 class="page-title">Obsah článku</h2>
            {headings.map((heading: any) => (
              <a href={`#${heading.slug}`} class="page-description-container">
                <p class="page-description">
                  {heading.text}
                </p>
              </a>
            ))}
        </aside>
    </div>
  </div>
</PageLayout>
<style>
  html {
    scroll-behavior: smooth; 
  }
  article {
    flex: 1;
  }
  header {
    display: flex;
    align-items: center;
    gap: 40px;
    margin-bottom: 20px;
  }
  h1 {
    font-size: 2.3rem;
    font-weight: bold;
    margin-block: 20px;
    color: var(--nav-hover-text);
  }
  .markdown-post-layout {
    max-width: 1500px;
    margin: 50px auto;
    display: flex;
    gap: 60px;
    position: relative;
    padding: 0 20px;
  }

  /* Markdown */

  :global(.markdown-content p) {
    line-height: 2;
    margin-block: 20px;
  }
  :global(.markdown-content h2) {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--nav-hover-text);
    margin-block: 20px;
    scroll-margin-top: 80px;
  }
  .author-info {
    display: flex;
    align-items: center;
    gap: 20px;
  }
  .pfp {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 100%;
  }
  .thumbnail {
    max-width: 100%;
    height: 400px;
    object-fit: cover;
    border-radius: 10px;
  }
  .flex-container {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  /* TOC */

  .aside-container {
    position: sticky;
    top: 100px;
    width: 200px;
    height: fit-content;
    align-items: start;
    flex-shrink: 0;
  }
  .markdown-heading .page-title {
    font-size: 1.3rem;
    color: var(--nav-hover-text);
    margin-bottom: 10px;
    letter-spacing: 2px;
  }
  .markdown-heading .page-description {
    font-size: 0.85rem;
    color: var(--text-primary);
    padding-inline-end: 20px;
    padding-inline-start: 10px;
  }
  .page-description-container {
    height: 60px;
    width: fit-content;
    display: flex;
    align-items: center;
    gap: 15px;
    border-radius: 0px 5px 5px 0px;
    border-inline-start: 4px solid var(--toc-border);
  }
  .page-description-container:hover .page-description {
    color: var(--nav-hover-text);
  }
  .page-description-container.active {
    background: var(--nav-hover-bg);
    border-inline-start: 4px solid var(--nav-hover-text);
  }
  
  /* Map link styling */
  
  .map-link {
    color: var(--nav-hover-text);
    background-color: var(--nav-hover-bg);
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 10px;
    border-radius: 5px;
  }
  .map-link:hover {
    text-decoration: underline;
  }
  
  /* Ratings */

  .ratings {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-top: 20px;
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
  }
  .rating-container {
    display: flex;
    align-items: center;
  }
  .ratings .difficulty {
    color: var(--nav-hover-text);
    font-weight: bold;
    margin-right: 10px;
  }
  /* Gpx */
  .aside-container-left {
    position: sticky;
    top: 100px;
    width: 200px;
    height: fit-content;
    flex-shrink: 0;
  }
  .gpx-link {
    color: var(--nav-hover-text);
    background-color: var(--nav-hover-bg);
    display: flex;
    align-items: center;
    margin-block-end: 20px;
    gap: 5px;
    padding: 10px;
    border-radius: 5px;
  }
  #map {
    width: 200px;
    height: 200px;
    border-radius: 10px;
    margin-block-end: 20px;
  }
  #gpx-info {
    margin-block-end: 20px;
  }
</style>
<script 
  define:vars={{ 
    hasGpx: !!frontmatter.gpx, 
    lat: frontmatter.latitude, 
    lng: frontmatter.longitude, 
    gpxPath: frontmatter.gpx 
  }}
>

document.addEventListener("DOMContentLoaded", () => {
  const mapElement = document.getElementById('map');
    if (!mapElement || !hasGpx) {
      return; // Ukonči, ak element neexistuje
    }

    if (!window.L) {
      console.error('Leaflet nie je načítaný!');
      return;
    }

    const initialLat = lat || 49.1;  // Default Slovensko 
    const initialLng = lng || 19.5;
    const map = L.map("map", {
      fullscreenControl: true,
      fullscreenControlOptions: {
        position: 'topright',
      }
    }).setView([initialLat, initialLng], 12); 

    map.on('enterFullscreen', function () {
	    console.log('entered fullscreen');
    });

    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(map);

    if (gpxPath && window.L.GPX) {
      try {
        new L.GPX(gpxPath, {
          async: true,
          polyline_options: {
            color: '#3388ff',
            weight: 2,
            opacity: 0.7
          }
        }).on('loaded', function(e) {
          map.fitBounds(e.target.getBounds());

      const distance = (e.target.get_distance() / 1000).toFixed(2); // km
      
      // Vypočítaj tempo v ms/km
      const paceMs = e.target.get_moving_pace();
      const totalSeconds = Math.floor(paceMs / 1000);
      const minutes = Math.floor(totalSeconds / 60);
      const seconds = totalSeconds % 60;
      const paceFormatted = `${minutes}:${seconds.toString().padStart(2, '0')}/km`;

      const elevationGain = Math.round(e.target.get_elevation_gain());
      const elevationMin = Math.round(e.target.get_elevation_min());
      const elevationMax = Math.round(e.target.get_elevation_max());
      const time = e.target.get_total_time();
      const duration = e.target.get_duration_string(time);

      // Vlož info do DOMu pod mapu
      let infoDiv = document.getElementById('gpx-info');
      infoDiv.innerHTML = `
        <div style="
          background-color: var(--nav-hover-bg);
          border-radius: 15px;
          margin-bottom: 20px;
          position: sticky;
          top: 0px;
        ">
          <div style="
            color: var(--nav-hover-bg);
            background-color: var(--nav-hover-text);
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 10px;
            border-radius: 15px 15px 0 0;">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
              <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3c7.2 0 9 1.8 9 9s-1.8 9-9 9s-9-1.8-9-9s1.8-9 9-9m0 5v4m0 4h.01"/>
            </svg>
            <h3>
              Informácie o trase
            </h3>
          </div>
          <div style="
            padding: 15px;
          ">
            <p style="margin-bottom: 5px; color: var(--nav-hover-text)"><strong>Tempo</strong>: ${paceFormatted}</p>
            <p style="margin-bottom: 5px; color: var(--nav-hover-text)"><strong>Dĺžka</strong>: ${distance} km</p>
            <p style="margin-bottom: 5px; color: var(--nav-hover-text)"><strong>Prevýšenie</strong>: ${elevationGain} m</p>
            <p style="margin-bottom: 5px; color: var(--nav-hover-text)"><strong>Najnižší bod</strong>: ${elevationMin} m</p>
            <p style="margin-bottom: 5px; color: var(--nav-hover-text)"><strong>Najvyšší bod</strong>: ${elevationMax} m</p>
            <p style="margin-bottom: 5px; color: var(--nav-hover-text)"><strong>Trvanie</strong>: ${duration}</p>
          </div>
        </div>
      `;
        }).addTo(map);
      } catch (e) {
        console.error('Chyba pri načítaní GPX', e);
      }
    }
})

/* Observer */
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      const headingId = entry.target.id;
      const tocLink = document.querySelector(`.markdown-heading a[href="#${headingId}"]`);
       
      if (tocLink) {
        if (entry.isIntersecting) {
          tocLink.classList.add('active');
        } else {
          tocLink.classList.remove('active');
        }
      }
    });
  }, {
    rootMargin: "0px",
    threshold: 1
  });
   
  document.querySelectorAll('article h2').forEach(heading => {
    observer.observe(heading);
  });
</script>
